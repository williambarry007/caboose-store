//
// Cart
//
// :: Initialize
// :: Open
// :: Bind Events
// :: Close
// :: Add
// :: Update
// :: Remove

var CabooseCart = function() {
  var self = this;
  
  //
  // Initialize
  //
  
  self.initialize = function() {
    $.ajax({
      url: '/cart/items',
      type: 'get',
      success: function(response) {
        self.items = response;
        
        // If this is the mobile cart page
        if (window.location.pathname == '/cart/mobile') self.bindEvents();
        
        // Emit ready event
        Caboose.events.trigger('cart.ready');
        
        // Open cart
        $('[caboose-cart=open]').on('click', function(event) {
          event.preventDefault();
          
          if ($.browser.mobile) {
            Caboose.redirect('/cart/mobile')
          } else {
            self.open();
          }
        });
        
        // Add to cart from button
        $('[caboose-cart=add]').not('form').on('click', function(event) {
          event.preventDefault();
          self.add( $(event.target).data('id') );
          if (!$.browser.mobile) self.open();
        });
        
        // Add to cart from form
        $('form[caboose-cart=add]').on('submit', function(event) {
          event.preventDefault();
          
          // Initially set the indecator variable to false
          var stop_submission = false;
          
          $('.custom-input').each(function(index, el) {
            $el = $(el)
            
            // If the value is empty or equal to the placeholder; val() will return the placeholder value if it's empty
            if ( $el.val() == "" || $el.val() == $el.attr('placeholder') ) {
              
              // Notify the user that an input is required; assuming all custom inputs are required
              alert('You must enter a value for ' + $el.attr('placeholder'));
              
              // Indicate that errors were found
              stop_submission = true;
              
              // Exit the each loop
              return false;
            }
          });
          
          // Exit function if errors were found
          if (stop_submission) return false;
          
          // Collect the form data
          var data = $(event.delegateTarget).serializeArray()
            , json = _.object( _.pluck(data, 'name'), _.pluck(data, 'value') );
            
          // Add to cart and open up if this is a desktop browser
          self.add(json);
          if (!$.browser.mobile) self.open();
        });
      }
    });
  };
  
  //
  // Open
  //
  
  self.open = function(mobile) {
    $.colorbox({
      href: '/modal',
      iframe: true,
      innerWidth: 600,
      innerHeight: 400,
      
      onComplete: function() {
        $('#cboxLoadedContent iframe').load(self.bindEvents);
      }
    });
  };
  
  //
  // Bind Events
  //
  
  self.bindEvents = function() {
    var $container = $('#cboxLoadedContent iframe').contents().find('#modal_content')
      , content    = JST['caboose_store/cart/index']({items: self.items});
    
    // If container exists inject content into modal
    // otherwise define it as the body for event binding
    if ($container.length) {
      $container.html(content);
    } else {
      $container = $('body')
    }
    
    // Close cart
    $container.find('[caboose-cart=close]').on('click', function(event) {
      event.preventDefault();
      self.close();
    });
    
    // Redirect user
    $container.find('[caboose-cart=redirect]').on('click', function(event) {
      event.preventDefault();
      window.location.href = event.target.href;
    });
    
    // Update item from single input
    $container.find('[caboose-cart=update]').not('form').on('change', function(event) {
      var $target    = $(event.target)
        , id         = $target.data('id')
        , attribute  = $target.attr('name')
        , value      = $target.val()
        , attributes = {};
        
      attributes[attribute] = value;
      self.update(id, attributes);
    });
    
    // Update item from form
    $container.find('form[caboose-cart=update]').on('submit', function(event) {
      event.preventDefault();
      
      var $target    = $(event.delegateTarget)
        , id         = $target.data('id')
        , form       = $target.serializeArray()
        , attributes = _.object( _.pluck(form, 'name'), _.pluck(form, 'value') );
        
      self.update(id, attributes);
    });
    
    // Remove from cart
    $container.find('[caboose-cart=remove]').on('click', function(event) {
      event.preventDefault();
      var id = $(event.target).data('id');
      
      self.remove(id, function() {
        if (self.items.length == 0) {
          self.close();
        } else {
          $container.find('[caboose-cart=remove][data-id=' + id + ']').parents('tr').remove();
        }
      });
    });
  };
  
  //
  // Close
  //
  
  self.close = function() {
    $.colorbox.close();
  };
  
  //
  // Add
  //
  
  self.add = function(something, callback) {
    var id   = _.isNumber(something) ? something : ''
      , data = _.isObject(something) ? something : {};
      
    $.ajax({
      url: '/cart/item/' + id,
      type: 'post',
      data: data,
      success: function(response) {
        if (response.error) {
          alert(response.error);
        } else {
          
          // If this is mobile then redirect to mobile cart page
          if ($.browser.mobile) Caboose.redirect('/cart/mobile');
          
          // If item exists increment quantity, otherwise add to cart
          if ( _.contains(_.pluck(self.items, 'id'), response.id) ) {
            _.find(self.items, function(item) { return item.id == response.id }).quantity = response.quantity;
          } else {
            self.items.push(response);
          }
        }
        
        if (callback) callback(response);
      }
    });
  };
  
  //
  // Update
  //
  
  self.update = function(id, attributes, callback) {
    $.ajax({
      url: '/cart/item/' + id,
      type: 'put',
      data: {attributes: attributes},
      success: function(response) {
        
        // If successful update line item quantity; otherwise, notify the user with the received message
        if (response.success) {
          _.find(self.items, function(item) { return item.id == response.item.id }).quantity = response.item.quantity;
        } else if (response.error) {
          alert(response.message);
        }
        
        if (callback) callback(response);
      }
    });
  };
  
  //
  // Remove
  //
  
  self.remove = function(id, callback) {
    $.ajax({
      url: '/cart/item/' + id,
      type: 'delete',
      success: function(response) {
        self.items = _.reject(self.items, function(item) { return item.id == response.id });
        if ($.browser.mobile) Caboose.reload();
        if (callback) callback(response);
      }
    });
  };
  
  // Init and return
  $(document).ready(self.initialize);
  return self;
};

Caboose.Store.Cart = new CabooseCart();
